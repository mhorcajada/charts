# Número de réplicas del Deployment
replicaCount: 1

# Historial de revisiones mantenido por el Deployment (para rollback)
revisionHistoryLimit: 10

# Tiempo máximo que puede tardar el rollout de una revisión
progressDeadlineSeconds: 600

# Tiempo de espera antes de forzar la terminación del pod
terminationGracePeriodSeconds: 30

# Política de resolución DNS utilizada dentro del pod
dnsPolicy: ClusterFirst

# Planificador usado para la asignación del pod al nodo
schedulerName: default-scheduler

# Estrategia de actualización rolling (actualización progresiva de pods)
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%         # Máximo de pods adicionales sobre el número deseado
    maxUnavailable: 25%   # Máximo de pods no disponibles durante la actualización

# Sobrescriben los nombres automáticos generados por Helm
nameOverride: "storj"
fullnameOverride: "storj-test"

# Imagen oficial del gateway de Storj
image:
  repository: docker.io/storjlabs/gateway
  tag: 1d044e7-v1.10.0-go1.23.4
  pullPolicy: Always
  # Repositorio oficial de la imagen
  # tag versión específica y determinista
  # Política de descarga: Always, IfNotPresent o Never

# === MODO 1: Configuración mediante configMap + initContainer ===
# ConfigMap habilitado como fuente de configuración para storj
# Se monta en solo lectura y luego se copia sobre el PVC desde un initContainer
# configMap:
#   enabled: true
#   name: storj-gateway-config
#   defaultMode: 420
#   mountPath: /etc/storj-config
#   data:
#     config.yaml: |
#       access: REPLACE_WITH_ACCESS
#       minio.access-key: REPLACE_WITH_ACCESS_KEY
#       minio.secret-key: REPLACE_WITH_SECRET_KEY

# === MODO 2: Configuración mediante envFrom con configMap ===
# Configuración opcional de ConfigMap para definir variables de entorno
# STORJ_ACCESS, STORJ_MINIO_ACCESS_KEY y STORJ_MINIO_SECRET_KEY.
envConfigMap:
  enabled: false
#  name: storj-env-config
#  data:
#    STORJ_ACCESS: "REPLACE_WITH_ACCESS"
#    STORJ_MINIO_ACCESS_KEY: "REPLACE_WITH_ACCESS_KEY"
#    STORJ_MINIO_SECRET_KEY: "REPLACE_WITH_SECRET_KEY"

# === MODO 3: Configuración mediante inyección de secretos desde Hashicorp Vault (Vault Agent Injector) ===
# https://raw.githubusercontent.com/mhorcajada/charts/refs/heads/main/storj-gateway/values-vault.yaml

# === MODO 4: configuración por variables de entorno con Secret ===
# Opcional: definir un Secret con las credenciales STORJ si no se usa Vault.
# Se montará como envFrom o como variables individuales si está activado.
envSecret:
  enabled: true
  name: storj-env-secret
  data:
    STORJ_ACCESS: "REPLACE_WITH_ACCESS"
    STORJ_MINIO_ACCESS_KEY: "REPLACE_WITH_ACCESS_KEY"
    STORJ_MINIO_SECRET_KEY: "REPLACE_WITH_SECRET_KEY"

# Variables de entorno adicionales
env:
  - name: STORJ_SERVER_ADDRESS
    value: 0.0.0.0:7777
  # Activa o desactiva la interfaz web ligera incluida accesible desde http://$STORJ_SERVER_ADDRESS:7777.
  # - name: MINIO_BROWSER
  #   value: "on"
  # Activa o desactiva la caché. Establece en on para habilitarla.
  # - MINIO_CACHE: 
  #   value: "on"
  # Lista de patrones de objetos o buckets que se excluirán de la caché. Por ejemplo: *.pdf,mybucket/*. ￼
  # - MINIO_CACHE_EXCLUDE: 
  #   value: "*.pdf,mybucket/*"
  # Porcentaje máximo del disco que se puede utilizar para la caché. Por ejemplo: 80 para permitir hasta el 80% del disco.
  # - MINIO_CACHE_QUOTA: 
  #   value: 80
  # Número de accesos necesarios a un objeto antes de que se almacene en la caché. Por ejemplo: 3.
  # - MINIO_CACHE_AFTER: 
  #   value: 3
  # Porcentaje del uso de la caché en el que se detendrá la limpieza de objetos. Por ejemplo: 70.
  # - MINIO_CACHE_WATERMARK_LOW: 
  #   value: 70
  # Porcentaje del uso de la caché en el que se iniciará la limpieza de objetos menos utilizados. Por ejemplo: 90.
  # - MINIO_CACHE_WATERMARK_HIGH: 
  #   value: 90

# Comando base (storj detecta config.yaml automáticamente o usa env vars si están presentes)
command:
  - /bin/sh
  - "-c"

# Sin argumentos adicionales: se espera que config.yaml o env vars estén definidos correctamente
args:
  - exec /entrypoint run --access "$STORJ_ACCESS" --minio.access-key "$STORJ_MINIO_ACCESS_KEY" --minio.secret-key "$STORJ_MINIO_SECRET_KEY"

# Recursos mínimos para entorno de pruebas
resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "200m"
    memory: "256Mi"

# Cuenta de servicio
serviceAccount:
  create: true
  name: storj-gateway

# podSecurityContext define las restricciones y configuraciones de seguridad aplicadas al pod o contenedor,
# como el UID/GID, privilegios, capacidad de escalado de privilegios, acceso al host, etc.
podSecurityContext: {}
#  runAsUser: 1000
#  runAsGroup: 1000
#  fsGroup: 2000
#  allowPrivilegeEscalation: false
#  readOnlyRootFilesystem: true

# Volumen persistente obligatorio (almacenamiento, cache y config.yaml si se usa)
persistence:
  enabled: true
  existingClaim: storj-config-pvc-test-01
  mountPath: /root/.local/share/storj/gateway
  accessMode: ReadWriteOnce
  size: 5Mi
  storageClassName: ""
  create: false

# Montaje del volumen persistente para que storj escriba
volumeMounts:
  - mountPath: /root/.local/share/storj/gateway
    name: storj-config

# Configuración del servicio
service:
  enabled: true
  type: ClusterIP
  port: 7777
  targetPort: 7777

# Configura la sonda de liveness para detectar si el contenedor necesita reiniciarse
livenessProbe:
  enabled: true
  httpGet:
    path: /minio/health/live
    port: 7777
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5

# Configura la sonda de readiness para saber cuándo el contenedor está listo para recibir tráfico
readinessProbe:
  enabled: true
  httpGet:
    path: /minio/health/ready
    port: 7777
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5

# === MODO WebUI: webUi.enabled: true habilita la interfaz web para gestión de ficheros en Storj ===
webUi:
  enabled: true
  replicaCount: 1

  image:
    repository: machines/filestash
    tag: "latest@sha256:7fd7a33a0a0e8c724b5180d4d1732dd41d0525ead8d4509e37f93d83b33eaf52"

  ingress:
    enabled: true
    className: nginx
    host: filestash.cluster.local
    tls:
      enabled: true              # true para TLS, false para HTTP plano
      issuer: vault-issuer       # Issuer de cert-manager (e.g. vault-issuer, letsencrypt-prod)
      secretName: filestash-tls  # Nombre del Secret TLS

  # Configura la sonda de liveness para detectar si el contenedor necesita reiniciarse
  livenessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 8334
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 5

  # Configura la sonda de readiness para saber cuándo el contenedor está listo para recibir tráfico
  readinessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 8334
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 5

  persistence:
    enabled: true
    create: true
    existingClaim: filestash-config-pvc  # Si 'create' es false, debe existir este PVC
    storageClassName: longhorn
    size: 50Mi
