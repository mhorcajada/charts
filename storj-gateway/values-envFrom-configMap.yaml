# Número de réplicas del Deployment
replicaCount: 1

# Historial de revisiones mantenido por el Deployment (para rollback)
revisionHistoryLimit: 10

# Tiempo máximo que puede tardar el rollout de una revisión
progressDeadlineSeconds: 600

# Tiempo de espera antes de forzar la terminación del pod
terminationGracePeriodSeconds: 30

# Política de resolución DNS utilizada dentro del pod
dnsPolicy: ClusterFirst

# Planificador usado para la asignación del pod al nodo
schedulerName: default-scheduler

# Estrategia de actualización rolling update
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%

# Sobrescribir nombres por defecto de Helm
nameOverride: "storj"
fullnameOverride: "storj-test"

# Imagen oficial del gateway de Storj
image:
  repository: docker.io/storjlabs/gateway
  tag: 1d044e7-v1.10.0-go1.23.4
  pullPolicy: Always

# Volumen persistente obligatorio (almacenamiento, cache y config.yaml si se usa)
persistence:
  enabled: true
  existingClaim: storj-config-pvc-test-01
  mountPath: /root/.local/share/storj/gateway
  accessMode: ReadWriteOnce
  size: 5Mi
  storageClassName: ""
  create: false

# === MODO 1: configuración por variables de entorno ===
envConfigMap:
  enabled: true
  name: storj-env-config
  data:
    STORJ_ACCESS: REPLACE_WITH_ACCESS
    STORJ_MINIO_ACCESS_KEY: REPLACE_WITH_ACCESS_KEY
    STORJ_MINIO_SECRET_KEY: REPLACE_WITH_SECRET_KEY
    STORJ_SERVER_ADDRESS: "0.0.0.0:7777"
    # Activa o desactiva la interfaz web ligera incluida accesible desde http://$STORJ_SERVER_ADDRESS:7777.
    # MINIO_BROWSER: "on"
    # Activa o desactiva la caché. Establece en on para habilitarla.
    # MINIO_CACHE: "on"
    # Lista de patrones de objetos o buckets que se excluirán de la caché. Por ejemplo: *.pdf,mybucket/*.
    # MINIO_CACHE_EXCLUDE: "*.pdf,mybucket/*"
    # Porcentaje máximo del disco que se puede utilizar para la caché. Por ejemplo: 80 para permitir hasta el 80% del disco.
    # MINIO_CACHE_QUOTA: "80"
    # Número de accesos necesarios a un objeto antes de que se almacene en la caché. Por ejemplo: 3.
    # MINIO_CACHE_AFTER: "3"
    # Porcentaje del uso de la caché en el que se detendrá la limpieza de objetos. Por ejemplo: 70.
    # MINIO_CACHE_WATERMARK_LOW: "70"
    # Porcentaje del uso de la caché en el que se iniciará la limpieza de objetos menos utilizados. Por ejemplo: 90.
    # MINIO_CACHE_WATERMARK_HIGH: "90"

# Variables de entorno adicionales
env: []
  # - name: MYVAR
  #   value: ""

# Montaje del volumen persistente para que storj escriba
volumeMounts:
  - mountPath: /root/.local/share/storj/gateway
    name: storj-config

# === MODO 2 (opcional): configuración vía config.yaml ===
# configMap:
#   enabled: true
#   name: storj-gateway-config
#   defaultMode: 420
#   mountPath: /etc/storj-config
#   data:
#     config.yaml: |
#       access: REPLACE_WITH_ACCESS
#       minio.access-key: REPLACE_WITH_ACCESS_KEY
#       minio.secret-key: REPLACE_WITH_SECRET_KEY

# initContainer:
#   enabled: true
#   name: copy-config
#   image: busybox
#   pullPolicy: Always
#   env: []
#   command:
#     - /bin/sh
#     - -c
#   args:
#     - |
#       cp -f /etc/storj-config/config.yaml /root/.local/share/storj/gateway/config.yaml
#       echo "✅ config.yaml copiado al volumen persistente"
#   volumeMounts:
#     - mountPath: /root/.local/share/storj/gateway
#       name: storj-config
#     - mountPath: /etc/storj-config
#       name: storj-configmap
#   resources:
#     requests:
#       cpu: "25m"
#       memory: "32Mi"
#     limits:
#       cpu: "50m"
#       memory: "64Mi"

# Comando base (storj detecta config.yaml automáticamente o usa env vars si están presentes)
command:
  - /bin/sh
  - "-c"

# Sin argumentos adicionales: se espera que config.yaml o env vars estén definidos correctamente
args:
  - exec /entrypoint run --access "$STORJ_ACCESS" --minio.access-key "$STORJ_MINIO_ACCESS_KEY" --minio.secret-key "$STORJ_MINIO_SECRET_KEY"

# Recursos mínimos para entorno de pruebas
resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "200m"
    memory: "256Mi"

# Configuración del servicio
service:
  enabled: true
  type: ClusterIP
  port: 7777
  targetPort: 7777

# Cuenta de servicio
serviceAccount:
  create: true
  name: storj-gateway

# podSecurityContext define las restricciones y configuraciones de seguridad aplicadas al pod o contenedor,
# como el UID/GID, privilegios, capacidad de escalado de privilegios, acceso al host, etc.
podSecurityContext: {}
#  runAsUser: 1000
#  runAsGroup: 1000
#  fsGroup: 2000
#  allowPrivilegeEscalation: false
#  readOnlyRootFilesystem: true

# Anotaciones para Vault (comentadas, si se requiere modo secrets)
# podAnnotations: {}
#   vault.hashicorp.com/agent-image: hashicorp/vault:1.19.3
#   vault.hashicorp.com/agent-inject: "true"
#   vault.hashicorp.com/agent-inject-secret-storj-config.txt: internal/data/storj-gateway/config
#   vault.hashicorp.com/agent-inject-status: update
#   vault.hashicorp.com/agent-inject-template-storj-config.txt: |
#     {{ with secret "internal/data/storj-gateway/config" }}
#     export STORJ_ACCESS={{ .Data.data.access }}
#     export STORJ_MINIO_ACCESS_KEY={{ index .Data.data "access-key" }}
#     export STORJ_MINIO_SECRET_KEY={{ index .Data.data "secret-key" }}
#     {{ end }}
#   vault.hashicorp.com/ca-cert: /run/secrets/kubernetes.io/serviceaccount/ca.crt
#   vault.hashicorp.com/role: storj-gateway
