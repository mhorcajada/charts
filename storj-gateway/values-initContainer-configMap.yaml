# Número de réplicas del Deployment
replicaCount: 1

# Historial de revisiones mantenido por el Deployment (para rollback)
revisionHistoryLimit: 10

# Tiempo máximo que puede tardar el rollout de una revisión
progressDeadlineSeconds: 600

# Tiempo de espera antes de forzar la terminación del pod
terminationGracePeriodSeconds: 30

# Política de resolución DNS utilizada dentro del pod
dnsPolicy: ClusterFirst

# Planificador usado para la asignación del pod al nodo
schedulerName: default-scheduler

# Estrategia de actualización rolling (actualización progresiva de pods)
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%         # Máximo de pods adicionales sobre el número deseado
    maxUnavailable: 25%   # Máximo de pods no disponibles durante la actualización

# Sobrescriben los nombres automáticos generados por Helm
nameOverride: "storj"
fullnameOverride: "storj-test"

# Imagen oficial del gateway de Storj
image:
  repository: docker.io/storjlabs/gateway
  tag: 1d044e7-v1.10.0-go1.23.4
  pullPolicy: Always
  # Repositorio oficial de la imagen
  # tag versión específica y determinista
  # Política de descarga: Always, IfNotPresent o Never

# === MODO 1: Configuración mediante configMap + initContainer ===
# ConfigMap habilitado como fuente de configuración para storj
# Se monta en solo lectura y luego se copia sobre el PVC desde un initContainer
#      access: REPLACE_WITH_ACCESS
#      minio.access-key: REPLACE_WITH_ACCESS_KEY
#      minio.secret-key: REPLACE_WITH_SECRET_KEY
configMap:
  enabled: true
  name: storj-gateway-config
  defaultMode: 420
  mountPath: /etc/storj-config
  data:
    config.yaml: |
      # the serialized access, or name of the access to use
      access: REPLACE_WITH_ACCESS

      # if used in with -h, print advanced flags help
      # advanced: false

      # additional value appended to User-Agent
      # client.additional-user-agent: ""

      # User-Agent used for connecting to the satellite
      # client.user-agent: ""

      # address to listen on for debug endpoints
      # debug.addr: 127.0.0.1:0

      # If set, a path to write a process trace SVG to
      # debug.trace-out: ""

      # if true, log function filename and line number
      # log.caller: false

      # custom level overrides for specific loggers in the format NAME1=ERROR,NAME2=WARN,... Only level increment is supported, and only for selected loggers!
      # log.custom-level: ""

      # if true, set logging to development mode
      # log.development: false

      # configures log encoding. can either be 'console', 'json', 'pretty', or 'gcloudlogging'.
      # log.encoding: ""

      # the minimum log level to log
      # log.level: info

      # can be stdout, stderr, or a filename
      # log.output: stderr

      # if true, log stack traces
      # log.stack: false

      # address(es) to send telemetry to (comma-separated)
      # metrics.addr: collectora.storj.io:9000

      # application name for telemetry identification. Ignored for certain applications.
      # metrics.app: gateway

      # application suffix. Ignored for certain applications.
      # metrics.app-suffix: -release

      # address(es) to send telemetry to (comma-separated IP:port or complex BQ definition, like bigquery:app=...,project=...,dataset=..., depends on the config/usage)
      # metrics.event-addr: eventkitd.datasci.storj.io:9002

      # size of the internal eventkit queue for UDP sending
      # metrics.event-queue: 10000

      # instance id prefix
      # metrics.instance-prefix: ""

      # how frequently to send up telemetry. Ignored for certain applications.
      # metrics.interval: 1m0s

      # Minio Access Key to use
      minio.access-key: REPLACE_WITH_ACCESS_KEY

      # Minio generic server config path
      # minio.dir: /Users/miguel/minio

      # Minio Secret Key to use
      minio.secret-key: REPLACE_WITH_SECRET_KEY

      # The default number of iterations for each check
      # quickchecks: 100

      # how many objects to delete in parallel with DeleteObjects
      # s3.delete-objects-concurrency: 100

      # return 501 (Not Implemented) for CopyObject calls
      # s3.disable-copy-object: false

      # make ListObjects(V2) fully S3-compatible (specifically: always return lexicographically ordered results) but slow
      # s3.fully-compatible-listing: false

      # include custom metadata in S3's ListObjects, ListObjectsV2 and ListMultipartUploads responses
      # s3.include-custom-metadata-listing: true

      # maximum number of items to list for gateway-side filtering using arbitrary delimiter/prefix
      # s3.max-keys-exhaustive-limit: 100000

      # MaxKeys parameter limit for S3's ListObjects and ListObjectsV2 responses
      # s3.max-keys-limit: 1000

      # MaxUploads parameter limit for S3's ListMultipartUploads responses
      # s3.max-uploads-limit: 1000

      # minimum part size for multipart uploads
      # s3.min-part-size: 5242880

      # address to serve S3 api over
      # server.address: 127.0.0.1:7777

      # address for jaeger agent
      # tracing.agent-addr: agent.tracing.datasci.storj.io:5775

      # application name for tracing identification
      # tracing.app: gateway

      # application suffix
      # tracing.app-suffix: -release

      # buffer size for collector batch packet size
      # tracing.buffer-size: 0

      # whether tracing collector is enabled
      # tracing.enabled: true

      # how frequently to flush traces to tracing agent
      # tracing.interval: 0s

      # buffer size for collector queue size
      # tracing.queue-size: 0

      # how frequent to sample traces
      # tracing.sample: 0

      # serve content as a static website
      # website: false

# === MODO 2: Configuración mediante envFrom con configMap ===
# Configuración opcional de ConfigMap para definir variables de entorno S
# TORJ_ACCESS, STORJ_MINIO_ACCESS_KEY y STORJ_MINIO_SECRET_KEY.
envConfigMap:
  enabled: false

# === MODO 3: Configuración mediante inyección de secretos desde Hashicorp Vault (Vault Agent Injector) ===
# https://raw.githubusercontent.com/mhorcajada/charts/refs/heads/main/storj-gateway/values-vault.yaml

# === MODO 4: configuración por variables de entorno con Secret ===
# Opcional: definir un Secret con las credenciales STORJ si no se usa Vault.
# Se montará como envFrom o como variables individuales si está activado.
envSecret:
  enabled: false
  # name: storj-env-secret
  # data:
  #   STORJ_ACCESS: "REPLACE_WITH_ACCESS"
  #   STORJ_MINIO_ACCESS_KEY: "REPLACE_WITH_ACCESS_KEY"
  #   STORJ_MINIO_SECRET_KEY: "REPLACE_WITH_SECRET_KEY"

# Variables de entorno adicionales
env:
  - name: STORJ_SERVER_ADDRESS
    value: 0.0.0.0:7777
  # Activa o desactiva la interfaz web ligera incluida accesible desde http://$STORJ_SERVER_ADDRESS:7777.
  # - name: MINIO_BROWSER
  #   value: "on"
  # Activa o desactiva la caché. Establece en on para habilitarla.
  # - MINIO_CACHE: 
  #   value: "on"
  # Lista de patrones de objetos o buckets que se excluirán de la caché. Por ejemplo: *.pdf,mybucket/*. ￼
  # - MINIO_CACHE_EXCLUDE: 
  #   value: "*.pdf,mybucket/*"
  # Porcentaje máximo del disco que se puede utilizar para la caché. Por ejemplo: 80 para permitir hasta el 80% del disco.
  # - MINIO_CACHE_QUOTA: 
  #   value: 80
  # Número de accesos necesarios a un objeto antes de que se almacene en la caché. Por ejemplo: 3.
  # - MINIO_CACHE_AFTER: 
  #   value: 3
  # Porcentaje del uso de la caché en el que se detendrá la limpieza de objetos. Por ejemplo: 70.
  # - MINIO_CACHE_WATERMARK_LOW: 
  #   value: 70
  # Porcentaje del uso de la caché en el que se iniciará la limpieza de objetos menos utilizados. Por ejemplo: 90.
  # - MINIO_CACHE_WATERMARK_HIGH: 
  #   value: 90

# Comando base del contenedor principal
command:
  - /bin/sh
  - "-c"

# Args: storj leerá automáticamente config.yaml desde /root/.local/share/storj/gateway
args:
  - exec /entrypoint run

# Recursos mínimos requeridos para un entorno de prueba
resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "200m"
    memory: "256Mi"

# Cuenta de servicio personalizada
serviceAccount:
  create: true
  name: storj-gateway

# podSecurityContext define las restricciones y configuraciones de seguridad aplicadas al pod o contenedor,
# como el UID/GID, privilegios, capacidad de escalado de privilegios, acceso al host, etc.
podSecurityContext: {}
#  runAsUser: 1000
#  runAsGroup: 1000
#  fsGroup: 2000
#  allowPrivilegeEscalation: false
#  readOnlyRootFilesystem: true

# Volumen persistente requerido por storj para escribir su config.yaml
# Esta ruta coincide con el path predeterminado usado por storj
persistence:
  enabled: true
  existingClaim: storj-config-pvc-test-01
  mountPath: /root/.local/share/storj/gateway
  accessMode: ReadWriteOnce
  size: 5Mi
  storageClassName: ""
  create: false

# Montajes requeridos por initContainer y contenedor principal
volumeMounts:
  - mountPath: /root/.local/share/storj/gateway
    name: storj-config
  - mountPath: /etc/storj-config
    name: storj-configmap

# Servicio expone el puerto 7777 como ClusterIP
service:
  enabled: true
  type: ClusterIP
  port: 7777
  targetPort: 7777

# InitContainer que copia el fichero config.yaml desde el configMap
# al volumen persistente RW esperado por storj
initContainer:
  enabled: true
  name: copy-config
  image: busybox
  pullPolicy: Always
  env: []
  command:
    - /bin/sh
    - -c
  args:
    - |
      cp -f /etc/storj-config/config.yaml /root/.local/share/storj/gateway/config.yaml
      echo "✅ config.yaml copiado al volumen persistente"
  volumeMounts:
    - mountPath: /root/.local/share/storj/gateway
      name: storj-config
    - mountPath: /etc/storj-config
      name: storj-configmap
  resources:
    requests:
      cpu: "25m"
      memory: "32Mi"
    limits:
      cpu: "50m"
      memory: "64Mi"

# === MODO WebUI: webUi.enabled: true habilita la interfaz web para gestión de ficheros en Storj ===
webUi:
  enabled: true
  replicaCount: 1

  image:
    repository: machines/filestash
    tag: "latest@sha256:7fd7a33a0a0e8c724b5180d4d1732dd41d0525ead8d4509e37f93d83b33eaf52"

  ingress:
    enabled: true
    className: nginx
    host: filestash.cluster.local
    tls:
      enabled: true              # true para TLS, false para HTTP plano
      issuer: vault-issuer       # Issuer de cert-manager (e.g. vault-issuer, letsencrypt-prod)
      secretName: filestash-tls  # Nombre del Secret TLS

  persistence:
    enabled: true
    create: true
    existingClaim: filestash-config-pvc  # Si 'create' es false, debe existir este PVC
    storageClassName: longhorn
    size: 50Mi
